{"ast":null,"code":"import store from '../store';\nimport jwt from 'jsonwebtoken';\nimport { remove_user, set_user } from '../store/user/actions';\n\nconst updateReduxState = () => {\n  const localToken = localStorage.getItem('@token_user');\n  const localName = localStorage.getItem('@user_name');\n\n  if (!localName || !localToken) {\n    store.dispatch(remove_user());\n    return;\n  }\n\n  const onlyToken = localToken.split(' ')[1];\n  const tokenPayload = jwt.decode(onlyToken);\n  store.dispatch(set_user({\n    login: tokenPayload.sub,\n    name: localName,\n    token: localToken\n  }));\n};\n\nexport default updateReduxState;","map":{"version":3,"sources":["/Users/douglasmorais/Documents/GitHub/desafio-accenture-react/src/services/updateReduxState.ts"],"names":["store","jwt","remove_user","set_user","updateReduxState","localToken","localStorage","getItem","localName","dispatch","onlyToken","split","tokenPayload","decode","login","sub","name","token"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,uBAAtC;;AAIA,MAAMC,gBAAgB,GAAG,MAAM;AAC3B,QAAMC,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAnB;AACA,QAAMC,SAAS,GAAGF,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAlB;;AAEA,MAAK,CAACC,SAAD,IAAc,CAACH,UAApB,EAAiC;AAC7BL,IAAAA,KAAK,CAACS,QAAN,CAAgBP,WAAW,EAA3B;AACA;AACH;;AAED,QAAMQ,SAAS,GAAGL,UAAU,CAACM,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAlB;AACA,QAAMC,YAAY,GAAGX,GAAG,CAACY,MAAJ,CAAWH,SAAX,CAArB;AAEAV,EAAAA,KAAK,CAACS,QAAN,CAAgBN,QAAQ,CAAC;AACrBW,IAAAA,KAAK,EAAEF,YAAY,CAACG,GADC;AAErBC,IAAAA,IAAI,EAAER,SAFe;AAGrBS,IAAAA,KAAK,EAAEZ;AAHc,GAAD,CAAxB;AAKH,CAjBD;;AAmBA,eAAeD,gBAAf","sourcesContent":["import store from '../store';\nimport jwt from 'jsonwebtoken';\nimport { remove_user, set_user } from '../store/user/actions';\n\nimport { TokenPayload } from '../types/user';\n\nconst updateReduxState = () => {\n    const localToken = localStorage.getItem('@token_user');\n    const localName = localStorage.getItem('@user_name');\n\n    if ( !localName || !localToken ) {\n        store.dispatch( remove_user() );\n        return;\n    }\n\n    const onlyToken = localToken.split(' ')[1];\n    const tokenPayload = jwt.decode(onlyToken) as TokenPayload;\n\n    store.dispatch( set_user({\n        login: tokenPayload.sub,\n        name: localName,\n        token: localToken\n    }));\n}\n\nexport default updateReduxState;"]},"metadata":{},"sourceType":"module"}