{"ast":null,"code":"'use strict';\n\nfunction _process(v, mod) {\n  var i;\n  var r;\n\n  if (typeof mod === 'function') {\n    r = mod(v);\n\n    if (r !== undefined) {\n      v = r;\n    }\n  } else if (Array.isArray(mod)) {\n    for (i = 0; i < mod.length; i++) {\n      r = mod[i](v);\n\n      if (r !== undefined) {\n        v = r;\n      }\n    }\n  }\n\n  return v;\n}\n\nfunction parseKey(key, val) {\n  // detect negative index notation\n  if (key[0] === '-' && Array.isArray(val) && /^-\\d+$/.test(key)) {\n    return val.length + parseInt(key, 10);\n  }\n\n  return key;\n}\n\nfunction isIndex(k) {\n  return /^\\d+$/.test(k);\n}\n\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\nfunction isArrayOrObject(val) {\n  return Object(val) === val;\n}\n\nfunction isEmptyObject(val) {\n  return Object.keys(val).length === 0;\n}\n\nvar blacklist = ['__proto__', 'prototype', 'constructor'];\n\nvar blacklistFilter = function (part) {\n  return blacklist.indexOf(part) === -1;\n};\n\nfunction parsePath(path, sep) {\n  if (path.indexOf('[') >= 0) {\n    path = path.replace(/\\[/g, sep).replace(/]/g, '');\n  }\n\n  var parts = path.split(sep);\n  var check = parts.filter(blacklistFilter);\n\n  if (check.length !== parts.length) {\n    throw Error('Refusing to update blacklisted property ' + path);\n  }\n\n  return parts;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction DotObject(separator, override, useArray, useBrackets) {\n  if (!(this instanceof DotObject)) {\n    return new DotObject(separator, override, useArray, useBrackets);\n  }\n\n  if (typeof override === 'undefined') override = false;\n  if (typeof useArray === 'undefined') useArray = true;\n  if (typeof useBrackets === 'undefined') useBrackets = true;\n  this.separator = separator || '.';\n  this.override = override;\n  this.useArray = useArray;\n  this.useBrackets = useBrackets;\n  this.keepArray = false; // contains touched arrays\n\n  this.cleanup = [];\n}\n\nvar dotDefault = new DotObject('.', false, true, true);\n\nfunction wrap(method) {\n  return function () {\n    return dotDefault[method].apply(dotDefault, arguments);\n  };\n}\n\nDotObject.prototype._fill = function (a, obj, v, mod) {\n  var k = a.shift();\n\n  if (a.length > 0) {\n    obj[k] = obj[k] || (this.useArray && isIndex(a[0]) ? [] : {});\n\n    if (!isArrayOrObject(obj[k])) {\n      if (this.override) {\n        obj[k] = {};\n      } else {\n        if (!(isArrayOrObject(v) && isEmptyObject(v))) {\n          throw new Error('Trying to redefine `' + k + '` which is a ' + typeof obj[k]);\n        }\n\n        return;\n      }\n    }\n\n    this._fill(a, obj[k], v, mod);\n  } else {\n    if (!this.override && isArrayOrObject(obj[k]) && !isEmptyObject(obj[k])) {\n      if (!(isArrayOrObject(v) && isEmptyObject(v))) {\n        throw new Error(\"Trying to redefine non-empty obj['\" + k + \"']\");\n      }\n\n      return;\n    }\n\n    obj[k] = _process(v, mod);\n  }\n};\n/**\n *\n * Converts an object with dotted-key/value pairs to it's expanded version\n *\n * Optionally transformed by a set of modifiers.\n *\n * Usage:\n *\n *   var row = {\n *     'nr': 200,\n *     'doc.name': '  My Document  '\n *   }\n *\n *   var mods = {\n *     'doc.name': [_s.trim, _s.underscored]\n *   }\n *\n *   dot.object(row, mods)\n *\n * @param {Object} obj\n * @param {Object} mods\n */\n\n\nDotObject.prototype.object = function (obj, mods) {\n  var self = this;\n  Object.keys(obj).forEach(function (k) {\n    var mod = mods === undefined ? null : mods[k]; // normalize array notation.\n\n    var ok = parsePath(k, self.separator).join(self.separator);\n\n    if (ok.indexOf(self.separator) !== -1) {\n      self._fill(ok.split(self.separator), obj, obj[k], mod);\n\n      delete obj[k];\n    } else {\n      obj[k] = _process(obj[k], mod);\n    }\n  });\n  return obj;\n};\n/**\n * @param {String} path dotted path\n * @param {String} v value to be set\n * @param {Object} obj object to be modified\n * @param {Function|Array} mod optional modifier\n */\n\n\nDotObject.prototype.str = function (path, v, obj, mod) {\n  var ok = parsePath(path, this.separator).join(this.separator);\n\n  if (path.indexOf(this.separator) !== -1) {\n    this._fill(ok.split(this.separator), obj, v, mod);\n  } else {\n    obj[path] = _process(v, mod);\n  }\n\n  return obj;\n};\n/**\n *\n * Pick a value from an object using dot notation.\n *\n * Optionally remove the value\n *\n * @param {String} path\n * @param {Object} obj\n * @param {Boolean} remove\n */\n\n\nDotObject.prototype.pick = function (path, obj, remove, reindexArray) {\n  var i;\n  var keys;\n  var val;\n  var key;\n  var cp;\n  keys = parsePath(path, this.separator);\n\n  for (i = 0; i < keys.length; i++) {\n    key = parseKey(keys[i], obj);\n\n    if (obj && typeof obj === 'object' && key in obj) {\n      if (i === keys.length - 1) {\n        if (remove) {\n          val = obj[key];\n\n          if (reindexArray && Array.isArray(obj)) {\n            obj.splice(key, 1);\n          } else {\n            delete obj[key];\n          }\n\n          if (Array.isArray(obj)) {\n            cp = keys.slice(0, -1).join('.');\n\n            if (this.cleanup.indexOf(cp) === -1) {\n              this.cleanup.push(cp);\n            }\n          }\n\n          return val;\n        } else {\n          return obj[key];\n        }\n      } else {\n        obj = obj[key];\n      }\n    } else {\n      return undefined;\n    }\n  }\n\n  if (remove && Array.isArray(obj)) {\n    obj = obj.filter(function (n) {\n      return n !== undefined;\n    });\n  }\n\n  return obj;\n};\n/**\n *\n * Delete value from an object using dot notation.\n *\n * @param {String} path\n * @param {Object} obj\n * @return {any} The removed value\n */\n\n\nDotObject.prototype.delete = function (path, obj) {\n  return this.remove(path, obj, true);\n};\n/**\n *\n * Remove value from an object using dot notation.\n *\n * Will remove multiple items if path is an array.\n * In this case array indexes will be retained until all\n * removals have been processed.\n *\n * Use dot.delete() to automatically  re-index arrays.\n *\n * @param {String|Array<String>} path\n * @param {Object} obj\n * @param {Boolean} reindexArray\n * @return {any} The removed value\n */\n\n\nDotObject.prototype.remove = function (path, obj, reindexArray) {\n  var i;\n  this.cleanup = [];\n\n  if (Array.isArray(path)) {\n    for (i = 0; i < path.length; i++) {\n      this.pick(path[i], obj, true, reindexArray);\n    }\n\n    if (!reindexArray) {\n      this._cleanup(obj);\n    }\n\n    return obj;\n  } else {\n    return this.pick(path, obj, true, reindexArray);\n  }\n};\n\nDotObject.prototype._cleanup = function (obj) {\n  var ret;\n  var i;\n  var keys;\n  var root;\n\n  if (this.cleanup.length) {\n    for (i = 0; i < this.cleanup.length; i++) {\n      keys = this.cleanup[i].split('.');\n      root = keys.splice(0, -1).join('.');\n      ret = root ? this.pick(root, obj) : obj;\n      ret = ret[keys[0]].filter(function (v) {\n        return v !== undefined;\n      });\n      this.set(this.cleanup[i], ret, obj);\n    }\n\n    this.cleanup = [];\n  }\n};\n/**\n * Alias method  for `dot.remove`\n *\n * Note: this is not an alias for dot.delete()\n *\n * @param {String|Array<String>} path\n * @param {Object} obj\n * @param {Boolean} reindexArray\n * @return {any} The removed value\n */\n\n\nDotObject.prototype.del = DotObject.prototype.remove;\n/**\n *\n * Move a property from one place to the other.\n *\n * If the source path does not exist (undefined)\n * the target property will not be set.\n *\n * @param {String} source\n * @param {String} target\n * @param {Object} obj\n * @param {Function|Array} mods\n * @param {Boolean} merge\n */\n\nDotObject.prototype.move = function (source, target, obj, mods, merge) {\n  if (typeof mods === 'function' || Array.isArray(mods)) {\n    this.set(target, _process(this.pick(source, obj, true), mods), obj, merge);\n  } else {\n    merge = mods;\n    this.set(target, this.pick(source, obj, true), obj, merge);\n  }\n\n  return obj;\n};\n/**\n *\n * Transfer a property from one object to another object.\n *\n * If the source path does not exist (undefined)\n * the property on the other object will not be set.\n *\n * @param {String} source\n * @param {String} target\n * @param {Object} obj1\n * @param {Object} obj2\n * @param {Function|Array} mods\n * @param {Boolean} merge\n */\n\n\nDotObject.prototype.transfer = function (source, target, obj1, obj2, mods, merge) {\n  if (typeof mods === 'function' || Array.isArray(mods)) {\n    this.set(target, _process(this.pick(source, obj1, true), mods), obj2, merge);\n  } else {\n    merge = mods;\n    this.set(target, this.pick(source, obj1, true), obj2, merge);\n  }\n\n  return obj2;\n};\n/**\n *\n * Copy a property from one object to another object.\n *\n * If the source path does not exist (undefined)\n * the property on the other object will not be set.\n *\n * @param {String} source\n * @param {String} target\n * @param {Object} obj1\n * @param {Object} obj2\n * @param {Function|Array} mods\n * @param {Boolean} merge\n */\n\n\nDotObject.prototype.copy = function (source, target, obj1, obj2, mods, merge) {\n  if (typeof mods === 'function' || Array.isArray(mods)) {\n    this.set(target, _process( // clone what is picked\n    JSON.parse(JSON.stringify(this.pick(source, obj1, false))), mods), obj2, merge);\n  } else {\n    merge = mods;\n    this.set(target, this.pick(source, obj1, false), obj2, merge);\n  }\n\n  return obj2;\n};\n/**\n *\n * Set a property on an object using dot notation.\n *\n * @param {String} path\n * @param {any} val\n * @param {Object} obj\n * @param {Boolean} merge\n */\n\n\nDotObject.prototype.set = function (path, val, obj, merge) {\n  var i;\n  var k;\n  var keys;\n  var key; // Do not operate if the value is undefined.\n\n  if (typeof val === 'undefined') {\n    return obj;\n  }\n\n  keys = parsePath(path, this.separator);\n\n  for (i = 0; i < keys.length; i++) {\n    key = keys[i];\n\n    if (i === keys.length - 1) {\n      if (merge && isObject(val) && isObject(obj[key])) {\n        for (k in val) {\n          if (hasOwnProperty.call(val, k)) {\n            obj[key][k] = val[k];\n          }\n        }\n      } else if (merge && Array.isArray(obj[key]) && Array.isArray(val)) {\n        for (var j = 0; j < val.length; j++) {\n          obj[keys[i]].push(val[j]);\n        }\n      } else {\n        obj[key] = val;\n      }\n    } else if ( // force the value to be an object\n    !hasOwnProperty.call(obj, key) || !isObject(obj[key]) && !Array.isArray(obj[key])) {\n      // initialize as array if next key is numeric\n      if (/^\\d+$/.test(keys[i + 1])) {\n        obj[key] = [];\n      } else {\n        obj[key] = {};\n      }\n    }\n\n    obj = obj[key];\n  }\n\n  return obj;\n};\n/**\n *\n * Transform an object\n *\n * Usage:\n *\n *   var obj = {\n *     \"id\": 1,\n *    \"some\": {\n *      \"thing\": \"else\"\n *    }\n *   }\n *\n *   var transform = {\n *     \"id\": \"nr\",\n *    \"some.thing\": \"name\"\n *   }\n *\n *   var tgt = dot.transform(transform, obj)\n *\n * @param {Object} recipe Transform recipe\n * @param {Object} obj Object to be transformed\n * @param {Array} mods modifiers for the target\n */\n\n\nDotObject.prototype.transform = function (recipe, obj, tgt) {\n  obj = obj || {};\n  tgt = tgt || {};\n  Object.keys(recipe).forEach(function (key) {\n    this.set(recipe[key], this.pick(key, obj), tgt);\n  }.bind(this));\n  return tgt;\n};\n/**\n *\n * Convert object to dotted-key/value pair\n *\n * Usage:\n *\n *   var tgt = dot.dot(obj)\n *\n *   or\n *\n *   var tgt = {}\n *   dot.dot(obj, tgt)\n *\n * @param {Object} obj source object\n * @param {Object} tgt target object\n * @param {Array} path path array (internal)\n */\n\n\nDotObject.prototype.dot = function (obj, tgt, path) {\n  tgt = tgt || {};\n  path = path || [];\n  var isArray = Array.isArray(obj);\n  Object.keys(obj).forEach(function (key) {\n    var index = isArray && this.useBrackets ? '[' + key + ']' : key;\n\n    if (isArrayOrObject(obj[key]) && (isObject(obj[key]) && !isEmptyObject(obj[key]) || Array.isArray(obj[key]) && !this.keepArray && obj[key].length !== 0)) {\n      if (isArray && this.useBrackets) {\n        var previousKey = path[path.length - 1] || '';\n        return this.dot(obj[key], tgt, path.slice(0, -1).concat(previousKey + index));\n      } else {\n        return this.dot(obj[key], tgt, path.concat(index));\n      }\n    } else {\n      if (isArray && this.useBrackets) {\n        tgt[path.join(this.separator).concat('[' + key + ']')] = obj[key];\n      } else {\n        tgt[path.concat(index).join(this.separator)] = obj[key];\n      }\n    }\n  }.bind(this));\n  return tgt;\n};\n\nDotObject.pick = wrap('pick');\nDotObject.move = wrap('move');\nDotObject.transfer = wrap('transfer');\nDotObject.transform = wrap('transform');\nDotObject.copy = wrap('copy');\nDotObject.object = wrap('object');\nDotObject.str = wrap('str');\nDotObject.set = wrap('set');\nDotObject.delete = wrap('delete');\nDotObject.del = DotObject.remove = wrap('remove');\nDotObject.dot = wrap('dot');\n['override', 'overwrite'].forEach(function (prop) {\n  Object.defineProperty(DotObject, prop, {\n    get: function () {\n      return dotDefault.override;\n    },\n    set: function (val) {\n      dotDefault.override = !!val;\n    }\n  });\n});\n['useArray', 'keepArray', 'useBrackets'].forEach(function (prop) {\n  Object.defineProperty(DotObject, prop, {\n    get: function () {\n      return dotDefault[prop];\n    },\n    set: function (val) {\n      dotDefault[prop] = val;\n    }\n  });\n});\nDotObject._process = _process;\nmodule.exports = DotObject;","map":{"version":3,"sources":["/Users/douglasmorais/Documents/GitHub/desafio-accenture-react/node_modules/dot-object/index.js"],"names":["_process","v","mod","i","r","undefined","Array","isArray","length","parseKey","key","val","test","parseInt","isIndex","k","isObject","Object","prototype","toString","call","isArrayOrObject","isEmptyObject","keys","blacklist","blacklistFilter","part","indexOf","parsePath","path","sep","replace","parts","split","check","filter","Error","hasOwnProperty","DotObject","separator","override","useArray","useBrackets","keepArray","cleanup","dotDefault","wrap","method","apply","arguments","_fill","a","obj","shift","object","mods","self","forEach","ok","join","str","pick","remove","reindexArray","cp","splice","slice","push","n","delete","_cleanup","ret","root","set","del","move","source","target","merge","transfer","obj1","obj2","copy","JSON","parse","stringify","j","transform","recipe","tgt","bind","dot","index","previousKey","concat","prop","defineProperty","get","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nfunction _process (v, mod) {\n  var i\n  var r\n\n  if (typeof mod === 'function') {\n    r = mod(v)\n    if (r !== undefined) {\n      v = r\n    }\n  } else if (Array.isArray(mod)) {\n    for (i = 0; i < mod.length; i++) {\n      r = mod[i](v)\n      if (r !== undefined) {\n        v = r\n      }\n    }\n  }\n\n  return v\n}\n\nfunction parseKey (key, val) {\n  // detect negative index notation\n  if (key[0] === '-' && Array.isArray(val) && /^-\\d+$/.test(key)) {\n    return val.length + parseInt(key, 10)\n  }\n  return key\n}\n\nfunction isIndex (k) {\n  return /^\\d+$/.test(k)\n}\n\nfunction isObject (val) {\n  return Object.prototype.toString.call(val) === '[object Object]'\n}\n\nfunction isArrayOrObject (val) {\n  return Object(val) === val\n}\n\nfunction isEmptyObject (val) {\n  return Object.keys(val).length === 0\n}\n\nvar blacklist = ['__proto__', 'prototype', 'constructor']\nvar blacklistFilter = function (part) { return blacklist.indexOf(part) === -1 }\n\nfunction parsePath (path, sep) {\n  if (path.indexOf('[') >= 0) {\n    path = path.replace(/\\[/g, sep).replace(/]/g, '')\n  }\n\n  var parts = path.split(sep)\n\n  var check = parts.filter(blacklistFilter)\n\n  if (check.length !== parts.length) {\n    throw Error('Refusing to update blacklisted property ' + path)\n  }\n\n  return parts\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty\n\nfunction DotObject (separator, override, useArray, useBrackets) {\n  if (!(this instanceof DotObject)) {\n    return new DotObject(separator, override, useArray, useBrackets)\n  }\n\n  if (typeof override === 'undefined') override = false\n  if (typeof useArray === 'undefined') useArray = true\n  if (typeof useBrackets === 'undefined') useBrackets = true\n  this.separator = separator || '.'\n  this.override = override\n  this.useArray = useArray\n  this.useBrackets = useBrackets\n  this.keepArray = false\n\n  // contains touched arrays\n  this.cleanup = []\n}\n\nvar dotDefault = new DotObject('.', false, true, true)\nfunction wrap (method) {\n  return function () {\n    return dotDefault[method].apply(dotDefault, arguments)\n  }\n}\n\nDotObject.prototype._fill = function (a, obj, v, mod) {\n  var k = a.shift()\n\n  if (a.length > 0) {\n    obj[k] = obj[k] || (this.useArray && isIndex(a[0]) ? [] : {})\n\n    if (!isArrayOrObject(obj[k])) {\n      if (this.override) {\n        obj[k] = {}\n      } else {\n        if (!(isArrayOrObject(v) && isEmptyObject(v))) {\n          throw new Error(\n            'Trying to redefine `' + k + '` which is a ' + typeof obj[k]\n          )\n        }\n\n        return\n      }\n    }\n\n    this._fill(a, obj[k], v, mod)\n  } else {\n    if (!this.override && isArrayOrObject(obj[k]) && !isEmptyObject(obj[k])) {\n      if (!(isArrayOrObject(v) && isEmptyObject(v))) {\n        throw new Error(\"Trying to redefine non-empty obj['\" + k + \"']\")\n      }\n\n      return\n    }\n\n    obj[k] = _process(v, mod)\n  }\n}\n\n/**\n *\n * Converts an object with dotted-key/value pairs to it's expanded version\n *\n * Optionally transformed by a set of modifiers.\n *\n * Usage:\n *\n *   var row = {\n *     'nr': 200,\n *     'doc.name': '  My Document  '\n *   }\n *\n *   var mods = {\n *     'doc.name': [_s.trim, _s.underscored]\n *   }\n *\n *   dot.object(row, mods)\n *\n * @param {Object} obj\n * @param {Object} mods\n */\nDotObject.prototype.object = function (obj, mods) {\n  var self = this\n\n  Object.keys(obj).forEach(function (k) {\n    var mod = mods === undefined ? null : mods[k]\n    // normalize array notation.\n    var ok = parsePath(k, self.separator).join(self.separator)\n\n    if (ok.indexOf(self.separator) !== -1) {\n      self._fill(ok.split(self.separator), obj, obj[k], mod)\n      delete obj[k]\n    } else {\n      obj[k] = _process(obj[k], mod)\n    }\n  })\n\n  return obj\n}\n\n/**\n * @param {String} path dotted path\n * @param {String} v value to be set\n * @param {Object} obj object to be modified\n * @param {Function|Array} mod optional modifier\n */\nDotObject.prototype.str = function (path, v, obj, mod) {\n  var ok = parsePath(path, this.separator).join(this.separator)\n\n  if (path.indexOf(this.separator) !== -1) {\n    this._fill(ok.split(this.separator), obj, v, mod)\n  } else {\n    obj[path] = _process(v, mod)\n  }\n\n  return obj\n}\n\n/**\n *\n * Pick a value from an object using dot notation.\n *\n * Optionally remove the value\n *\n * @param {String} path\n * @param {Object} obj\n * @param {Boolean} remove\n */\nDotObject.prototype.pick = function (path, obj, remove, reindexArray) {\n  var i\n  var keys\n  var val\n  var key\n  var cp\n\n  keys = parsePath(path, this.separator)\n  for (i = 0; i < keys.length; i++) {\n    key = parseKey(keys[i], obj)\n    if (obj && typeof obj === 'object' && key in obj) {\n      if (i === keys.length - 1) {\n        if (remove) {\n          val = obj[key]\n          if (reindexArray && Array.isArray(obj)) {\n            obj.splice(key, 1)\n          } else {\n            delete obj[key]\n          }\n          if (Array.isArray(obj)) {\n            cp = keys.slice(0, -1).join('.')\n            if (this.cleanup.indexOf(cp) === -1) {\n              this.cleanup.push(cp)\n            }\n          }\n          return val\n        } else {\n          return obj[key]\n        }\n      } else {\n        obj = obj[key]\n      }\n    } else {\n      return undefined\n    }\n  }\n  if (remove && Array.isArray(obj)) {\n    obj = obj.filter(function (n) {\n      return n !== undefined\n    })\n  }\n  return obj\n}\n/**\n *\n * Delete value from an object using dot notation.\n *\n * @param {String} path\n * @param {Object} obj\n * @return {any} The removed value\n */\nDotObject.prototype.delete = function (path, obj) {\n  return this.remove(path, obj, true)\n}\n\n/**\n *\n * Remove value from an object using dot notation.\n *\n * Will remove multiple items if path is an array.\n * In this case array indexes will be retained until all\n * removals have been processed.\n *\n * Use dot.delete() to automatically  re-index arrays.\n *\n * @param {String|Array<String>} path\n * @param {Object} obj\n * @param {Boolean} reindexArray\n * @return {any} The removed value\n */\nDotObject.prototype.remove = function (path, obj, reindexArray) {\n  var i\n\n  this.cleanup = []\n  if (Array.isArray(path)) {\n    for (i = 0; i < path.length; i++) {\n      this.pick(path[i], obj, true, reindexArray)\n    }\n    if (!reindexArray) {\n      this._cleanup(obj)\n    }\n    return obj\n  } else {\n    return this.pick(path, obj, true, reindexArray)\n  }\n}\n\nDotObject.prototype._cleanup = function (obj) {\n  var ret\n  var i\n  var keys\n  var root\n  if (this.cleanup.length) {\n    for (i = 0; i < this.cleanup.length; i++) {\n      keys = this.cleanup[i].split('.')\n      root = keys.splice(0, -1).join('.')\n      ret = root ? this.pick(root, obj) : obj\n      ret = ret[keys[0]].filter(function (v) {\n        return v !== undefined\n      })\n      this.set(this.cleanup[i], ret, obj)\n    }\n    this.cleanup = []\n  }\n}\n\n/**\n * Alias method  for `dot.remove`\n *\n * Note: this is not an alias for dot.delete()\n *\n * @param {String|Array<String>} path\n * @param {Object} obj\n * @param {Boolean} reindexArray\n * @return {any} The removed value\n */\nDotObject.prototype.del = DotObject.prototype.remove\n\n/**\n *\n * Move a property from one place to the other.\n *\n * If the source path does not exist (undefined)\n * the target property will not be set.\n *\n * @param {String} source\n * @param {String} target\n * @param {Object} obj\n * @param {Function|Array} mods\n * @param {Boolean} merge\n */\nDotObject.prototype.move = function (source, target, obj, mods, merge) {\n  if (typeof mods === 'function' || Array.isArray(mods)) {\n    this.set(target, _process(this.pick(source, obj, true), mods), obj, merge)\n  } else {\n    merge = mods\n    this.set(target, this.pick(source, obj, true), obj, merge)\n  }\n\n  return obj\n}\n\n/**\n *\n * Transfer a property from one object to another object.\n *\n * If the source path does not exist (undefined)\n * the property on the other object will not be set.\n *\n * @param {String} source\n * @param {String} target\n * @param {Object} obj1\n * @param {Object} obj2\n * @param {Function|Array} mods\n * @param {Boolean} merge\n */\nDotObject.prototype.transfer = function (\n  source,\n  target,\n  obj1,\n  obj2,\n  mods,\n  merge\n) {\n  if (typeof mods === 'function' || Array.isArray(mods)) {\n    this.set(\n      target,\n      _process(this.pick(source, obj1, true), mods),\n      obj2,\n      merge\n    )\n  } else {\n    merge = mods\n    this.set(target, this.pick(source, obj1, true), obj2, merge)\n  }\n\n  return obj2\n}\n\n/**\n *\n * Copy a property from one object to another object.\n *\n * If the source path does not exist (undefined)\n * the property on the other object will not be set.\n *\n * @param {String} source\n * @param {String} target\n * @param {Object} obj1\n * @param {Object} obj2\n * @param {Function|Array} mods\n * @param {Boolean} merge\n */\nDotObject.prototype.copy = function (source, target, obj1, obj2, mods, merge) {\n  if (typeof mods === 'function' || Array.isArray(mods)) {\n    this.set(\n      target,\n      _process(\n        // clone what is picked\n        JSON.parse(JSON.stringify(this.pick(source, obj1, false))),\n        mods\n      ),\n      obj2,\n      merge\n    )\n  } else {\n    merge = mods\n    this.set(target, this.pick(source, obj1, false), obj2, merge)\n  }\n\n  return obj2\n}\n\n/**\n *\n * Set a property on an object using dot notation.\n *\n * @param {String} path\n * @param {any} val\n * @param {Object} obj\n * @param {Boolean} merge\n */\nDotObject.prototype.set = function (path, val, obj, merge) {\n  var i\n  var k\n  var keys\n  var key\n\n  // Do not operate if the value is undefined.\n  if (typeof val === 'undefined') {\n    return obj\n  }\n  keys = parsePath(path, this.separator)\n\n  for (i = 0; i < keys.length; i++) {\n    key = keys[i]\n    if (i === keys.length - 1) {\n      if (merge && isObject(val) && isObject(obj[key])) {\n        for (k in val) {\n          if (hasOwnProperty.call(val, k)) {\n            obj[key][k] = val[k]\n          }\n        }\n      } else if (merge && Array.isArray(obj[key]) && Array.isArray(val)) {\n        for (var j = 0; j < val.length; j++) {\n          obj[keys[i]].push(val[j])\n        }\n      } else {\n        obj[key] = val\n      }\n    } else if (\n      // force the value to be an object\n      !hasOwnProperty.call(obj, key) ||\n      (!isObject(obj[key]) && !Array.isArray(obj[key]))\n    ) {\n      // initialize as array if next key is numeric\n      if (/^\\d+$/.test(keys[i + 1])) {\n        obj[key] = []\n      } else {\n        obj[key] = {}\n      }\n    }\n    obj = obj[key]\n  }\n  return obj\n}\n\n/**\n *\n * Transform an object\n *\n * Usage:\n *\n *   var obj = {\n *     \"id\": 1,\n *    \"some\": {\n *      \"thing\": \"else\"\n *    }\n *   }\n *\n *   var transform = {\n *     \"id\": \"nr\",\n *    \"some.thing\": \"name\"\n *   }\n *\n *   var tgt = dot.transform(transform, obj)\n *\n * @param {Object} recipe Transform recipe\n * @param {Object} obj Object to be transformed\n * @param {Array} mods modifiers for the target\n */\nDotObject.prototype.transform = function (recipe, obj, tgt) {\n  obj = obj || {}\n  tgt = tgt || {}\n  Object.keys(recipe).forEach(\n    function (key) {\n      this.set(recipe[key], this.pick(key, obj), tgt)\n    }.bind(this)\n  )\n  return tgt\n}\n\n/**\n *\n * Convert object to dotted-key/value pair\n *\n * Usage:\n *\n *   var tgt = dot.dot(obj)\n *\n *   or\n *\n *   var tgt = {}\n *   dot.dot(obj, tgt)\n *\n * @param {Object} obj source object\n * @param {Object} tgt target object\n * @param {Array} path path array (internal)\n */\nDotObject.prototype.dot = function (obj, tgt, path) {\n  tgt = tgt || {}\n  path = path || []\n  var isArray = Array.isArray(obj)\n\n  Object.keys(obj).forEach(\n    function (key) {\n      var index = isArray && this.useBrackets ? '[' + key + ']' : key\n      if (\n        isArrayOrObject(obj[key]) &&\n        ((isObject(obj[key]) && !isEmptyObject(obj[key])) ||\n          (Array.isArray(obj[key]) && !this.keepArray && obj[key].length !== 0))\n      ) {\n        if (isArray && this.useBrackets) {\n          var previousKey = path[path.length - 1] || ''\n          return this.dot(\n            obj[key],\n            tgt,\n            path.slice(0, -1).concat(previousKey + index)\n          )\n        } else {\n          return this.dot(obj[key], tgt, path.concat(index))\n        }\n      } else {\n        if (isArray && this.useBrackets) {\n          tgt[path.join(this.separator).concat('[' + key + ']')] = obj[key]\n        } else {\n          tgt[path.concat(index).join(this.separator)] = obj[key]\n        }\n      }\n    }.bind(this)\n  )\n  return tgt\n}\n\nDotObject.pick = wrap('pick')\nDotObject.move = wrap('move')\nDotObject.transfer = wrap('transfer')\nDotObject.transform = wrap('transform')\nDotObject.copy = wrap('copy')\nDotObject.object = wrap('object')\nDotObject.str = wrap('str')\nDotObject.set = wrap('set')\nDotObject.delete = wrap('delete')\nDotObject.del = DotObject.remove = wrap('remove')\nDotObject.dot = wrap('dot');\n['override', 'overwrite'].forEach(function (prop) {\n  Object.defineProperty(DotObject, prop, {\n    get: function () {\n      return dotDefault.override\n    },\n    set: function (val) {\n      dotDefault.override = !!val\n    }\n  })\n});\n['useArray', 'keepArray', 'useBrackets'].forEach(function (prop) {\n  Object.defineProperty(DotObject, prop, {\n    get: function () {\n      return dotDefault[prop]\n    },\n    set: function (val) {\n      dotDefault[prop] = val\n    }\n  })\n})\n\nDotObject._process = _process\n\nmodule.exports = DotObject\n"]},"metadata":{},"sourceType":"script"}