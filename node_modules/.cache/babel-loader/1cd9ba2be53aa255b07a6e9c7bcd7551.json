{"ast":null,"code":"var _jsxFileName = \"/Users/douglasmorais/Documents/GitHub/desafio-accenture-react/src/components/Input/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useField } from '@unform/core';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { InputFormContainer, InputForm, ValidationError } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Input = ({\n  name,\n  ...props\n}) => {\n  _s();\n\n  const inputRef = useRef(null);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n\n    if ((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value) {\n      setIsFilled(true);\n    } else {\n      setIsFilled(false);\n    }\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(InputFormContainer, {\n      isErrored: !!error,\n      isFilled: isFilled,\n      isFocused: isFocused,\n      children: [/*#__PURE__*/_jsxDEV(InputForm, {\n        onFocus: handleInputFocus,\n        onBlur: handleInputBlur,\n        defaultValue: defaultValue,\n        ref: inputRef,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(ValidationError, {\n        message: error,\n        children: /*#__PURE__*/_jsxDEV(FiAlertCircle, {\n          color: \"#f42121\",\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Input, \"S8hZv2yw9yShqCu5E0NiMoFpr5U=\", false, function () {\n  return [useField];\n});\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/douglasmorais/Documents/GitHub/desafio-accenture-react/src/components/Input/index.tsx"],"names":["React","useCallback","useEffect","useRef","useState","useField","FiAlertCircle","InputFormContainer","InputForm","ValidationError","Input","name","props","inputRef","fieldName","defaultValue","error","registerField","isFocused","setIsFocused","isFilled","setIsFilled","handleInputFocus","handleInputBlur","current","value","ref","path"],"mappings":";;;AAAA,OAAOA,KAAP,IAAqCC,WAArC,EAAkDC,SAAlD,EAA6DC,MAA7D,EAAqEC,QAArE,QAAqF,OAArF;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAEA,SAASC,kBAAT,EAA6BC,SAA7B,EAAwCC,eAAxC,QAA+D,UAA/D;;;;AAMA,MAAMC,KAA2B,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQ,KAAGC;AAAX,CAAD,KAAwB;AAAA;;AAC1D,QAAMC,QAAQ,GAAGV,MAAM,CAAmB,IAAnB,CAAvB;AACA,QAAM;AAAEW,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDZ,QAAQ,CAACM,IAAD,CAAlE;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAMkB,gBAAgB,GAAGrB,WAAW,CAAC,MAAM;AACzCkB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFmC,EAEjC,EAFiC,CAApC;AAIA,QAAMI,eAAe,GAAGtB,WAAW,CAAC,MAAM;AAAA;;AACxCkB,IAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,6BAAIN,QAAQ,CAACW,OAAb,sDAAI,kBAAkBC,KAAtB,EAA6B;AAC3BJ,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,GAPkC,EAOhC,EAPgC,CAAnC;AASAnB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,aAAa,CAAC;AACZN,MAAAA,IAAI,EAAEG,SADM;AAEZY,MAAAA,GAAG,EAAEb,QAAQ,CAACW,OAFF;AAGZG,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACb,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,sBACE;AAAA,2BACE,QAAC,kBAAD;AAAoB,MAAA,SAAS,EAAE,CAAC,CAACD,KAAjC;AAAwC,MAAA,QAAQ,EAAEI,QAAlD;AAA4D,MAAA,SAAS,EAAEF,SAAvE;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,OAAO,EAAEI,gBADX;AAEE,QAAA,MAAM,EAAEC,eAFV;AAGE,QAAA,YAAY,EAAER,YAHhB;AAIE,QAAA,GAAG,EAAEF,QAJP;AAAA,WAIqBD;AAJrB;AAAA;AAAA;AAAA;AAAA,cADF,EAQGI,KAAK,iBACJ,QAAC,eAAD;AAAiB,QAAA,OAAO,EAAEA,KAA1B;AAAA,+BACE,QAAC,aAAD;AAAe,UAAA,KAAK,EAAC,SAArB;AAA+B,UAAA,IAAI,EAAE;AAArC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAkBD,CA7CD;;GAAMN,K;UAEsDL,Q;;;KAFtDK,K;AA+CN,eAAeA,KAAf","sourcesContent":["import React, { InputHTMLAttributes, useCallback, useEffect, useRef, useState } from 'react';\nimport { useField } from '@unform/core';\nimport { FiAlertCircle } from 'react-icons/fi';\n\nimport { InputFormContainer, InputForm, ValidationError } from './styles';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string;\n}\n\nconst Input: React.FC<InputProps> = ({ name, ...props }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, [])\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n    if (inputRef.current?.value) {\n      setIsFilled(true);\n    } else {\n      setIsFilled(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    })\n  }, [fieldName, registerField]);\n\n  return (\n    <>\n      <InputFormContainer isErrored={!!error} isFilled={isFilled} isFocused={isFocused}>\n        <InputForm\n          onFocus={handleInputFocus}\n          onBlur={handleInputBlur}\n          defaultValue={defaultValue}\n          ref={inputRef} {...props}\n        />\n\n        {error && (\n          <ValidationError message={error}>\n            <FiAlertCircle color=\"#f42121\" size={20} />\n          </ValidationError>\n        )}\n      </InputFormContainer>\n    </>\n  );\n}\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}