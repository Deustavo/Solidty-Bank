{"ast":null,"code":"export const maskCPF = cpfValue => {\n  const maskParts = [];\n  const numberOfParts = Math.ceil(cpfValue.length / 3);\n\n  for (let i = 0; i < numberOfParts; i++) {\n    maskParts.push(cpfValue.slice(3 * i, 3 * i + 3));\n  }\n\n  const mask = `${maskParts.slice(0, 3).join('.')}${maskParts.slice(3).length === 0 ? '' : `-${maskParts.slice(3).join('')}`}`;\n  return mask;\n};\nexport const removeMaskCPF = mask => {\n  return mask.split('').filter(char => !isNaN(Number(char))).join('');\n};","map":{"version":3,"sources":["/Users/douglasmorais/Documents/GitHub/desafio-accenture-react/src/utils/mask.ts"],"names":["maskCPF","cpfValue","maskParts","numberOfParts","Math","ceil","length","i","push","slice","mask","join","removeMaskCPF","split","filter","char","isNaN","Number"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAKC,QAAF,IAAwB;AAC3C,QAAMC,SAAS,GAAG,EAAlB;AAEA,QAAMC,aAAa,GAAGC,IAAI,CAACC,IAAL,CAAUJ,QAAQ,CAACK,MAAT,GAAkB,CAA5B,CAAtB;;AAEA,OAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGJ,aAArB,EAAoCI,CAAC,EAArC,EAA0C;AACtCL,IAAAA,SAAS,CAACM,IAAV,CAAgBP,QAAQ,CAACQ,KAAT,CAAe,IAAIF,CAAnB,EAAuB,IAAIA,CAAJ,GAAQ,CAA/B,CAAhB;AACH;;AAED,QAAMG,IAAI,GAAI,GAAGR,SAAS,CAACO,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,EAAsBE,IAAtB,CAA2B,GAA3B,CAAiC,GAAGT,SAAS,CAACO,KAAV,CAAgB,CAAhB,EAAmBH,MAAnB,KAA8B,CAA9B,GAAkC,EAAlC,GAAwC,IAAIJ,SAAS,CAACO,KAAV,CAAgB,CAAhB,EAAmBE,IAAnB,CAAwB,EAAxB,CAA6B,EAAG,EAAjI;AAEA,SAAOD,IAAP;AACH,CAZM;AAcP,OAAO,MAAME,aAAa,GAAKF,IAAF,IAAoB;AAC7C,SAAOA,IAAI,CAACG,KAAL,CAAW,EAAX,EAAeC,MAAf,CAAuBC,IAAI,IAAI,CAACC,KAAK,CAACC,MAAM,CAACF,IAAD,CAAP,CAArC,EAAsDJ,IAAtD,CAA2D,EAA3D,CAAP;AACH,CAFM","sourcesContent":["export const maskCPF = ( cpfValue: string ) => {\n    const maskParts = [];\n\n    const numberOfParts = Math.ceil(cpfValue.length / 3);\n\n    for ( let i = 0; i < numberOfParts; i++ ) {\n        maskParts.push( cpfValue.slice(3 * i, (3 * i + 3)) );\n    }\n\n    const mask = `${ maskParts.slice(0, 3).join('.') }${ maskParts.slice(3).length === 0 ? '' : `-${ maskParts.slice(3).join('') }` }`;\n\n    return mask;\n}\n\nexport const removeMaskCPF = ( mask: string ) => {\n    return mask.split('').filter( char => !isNaN(Number(char)) ).join('');\n}"]},"metadata":{},"sourceType":"module"}