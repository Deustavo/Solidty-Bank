{"ast":null,"code":"var _jsxFileName = \"/Users/douglasmorais/Documents/GitHub/desafio-accenture-react/src/components/Dashboard/Transactions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { TransactionsContainer, MonthConatiner } from './style';\nimport Balance from '../Balance';\nimport Extract from '../Extract';\nimport api from '../../../services/api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loader from '../../Loader';\nimport { set_transaction_data } from '../../../store/dashboard/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Transactions = () => {\n  _s();\n\n  const [contas, setContas] = useState();\n  const [loaded, setLoaded] = useState(true);\n  const [referenceDate, setReferenceDate] = useState(1);\n  const user = useSelector(state => state.user);\n  const dashboard = useSelector(state => state.dashboard);\n  const dispatch = useDispatch();\n  const formatDate = useCallback(date => {\n    setLoaded(false);\n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    return [year, month, day].join('-');\n  }, []);\n  useEffect(() => {\n    if (contas) dispatch(set_transaction_data({\n      accounts: contas\n    }));\n  }, [dispatch, contas]);\n  useEffect(() => {\n    if (dashboard.transactions_data) {\n      setContas(dashboard.transactions_data.accounts);\n      return;\n    }\n\n    const getDashboardValues = async () => {\n      try {\n        setLoaded(false);\n        const date = new Date();\n        const newD = new Date();\n        const newDate = new Date(date.setMonth(date.getMonth() - referenceDate));\n        const dateFormated = newD.getFullYear() + \"-\" + (newD.getMonth() + 1) + \"-\" + newD.getDate();\n        const newDateFormated = newDate.getFullYear() + \"-\" + (newDate.getMonth() + 1) + \"-\" + newDate.getDate();\n        const result = await api.get(`/dashboard?fim=${formatDate(dateFormated)}&inicio=${formatDate(newDateFormated)}&login=${user === null || user === void 0 ? void 0 : user.login}`, {\n          headers: {\n            Authorization: user === null || user === void 0 ? void 0 : user.token\n          }\n        });\n        setContas(result.data);\n        setLoaded(true);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getDashboardValues();\n  }, [referenceDate, user === null || user === void 0 ? void 0 : user.login, user === null || user === void 0 ? void 0 : user.token, formatDate, dashboard]);\n\n  const updateReference = event => {\n    const value = Number(event.target.value);\n    if (value > 0 && value <= 12) setReferenceDate(value);\n  };\n\n  if (loaded) return /*#__PURE__*/_jsxDEV(TransactionsContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Balance, {\n      contaBanco: contas === null || contas === void 0 ? void 0 : contas.contaBanco,\n      contaCredito: contas === null || contas === void 0 ? void 0 : contas.contaCredito\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MonthConatiner, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Escolhe a quantidade de \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"meses\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 36\n        }, this), \" para o filtro: \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: 1,\n        max: 12,\n        value: referenceDate,\n        onChange: updateReference\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Extract, {\n      contaBanco: contas === null || contas === void 0 ? void 0 : contas.contaBanco,\n      contaCredito: contas === null || contas === void 0 ? void 0 : contas.contaCredito\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);else return /*#__PURE__*/_jsxDEV(Loader, {\n    style: {\n      border: '4px solid #f0f0f0'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 15\n  }, this);\n};\n\n_s(Transactions, \"oGMJPX/ZdG8b88HKHmNgodEqo1g=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Transactions;\nexport default Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"sources":["/Users/douglasmorais/Documents/GitHub/desafio-accenture-react/src/components/Dashboard/Transactions/index.tsx"],"names":["React","useState","useEffect","useCallback","TransactionsContainer","MonthConatiner","Balance","Extract","api","useDispatch","useSelector","Loader","set_transaction_data","Transactions","contas","setContas","loaded","setLoaded","referenceDate","setReferenceDate","user","state","dashboard","dispatch","formatDate","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","accounts","transactions_data","getDashboardValues","newD","newDate","setMonth","dateFormated","newDateFormated","result","get","login","headers","Authorization","token","data","err","console","log","updateReference","event","value","Number","target","contaBanco","contaCredito","border"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, ChangeEvent, useCallback } from 'react';\n\nimport { TransactionsContainer, MonthConatiner } from './style';\nimport { Contas } from '../../../types/dash-board';\nimport Balance from '../Balance';\nimport Extract from '../Extract';\nimport api from '../../../services/api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ApplicationStore } from '../../../store';\nimport Loader from '../../Loader';\nimport { set_transaction_data } from '../../../store/dashboard/actions';\n\nconst Transactions: React.FC = () => {\n\n  const [ contas, setContas ] = useState<Contas>();\n  const [ loaded, setLoaded ] = useState(true);\n  const [ referenceDate, setReferenceDate ] = useState(1);\n\n  const user = useSelector( (state: ApplicationStore) => state.user );\n  const dashboard = useSelector(( state: ApplicationStore ) => state.dashboard);\n\n  const dispatch = useDispatch();\n\n  const formatDate = useCallback((date:string) => {\n    setLoaded(false);\n    \n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (month.length < 2) \n        month = '0' + month;\n    if (day.length < 2) \n        day = '0' + day;\n\n    return [year, month, day].join('-');\n  }, []);\n\n  useEffect(() => {\n    if ( contas )\n      dispatch( set_transaction_data({ accounts: contas }) );\n  }, [dispatch, contas]);\n\n  useEffect( ()=> {\n    if ( dashboard.transactions_data ) {\n      setContas(dashboard.transactions_data.accounts);\n\n      return;\n    }\n\n    const getDashboardValues = async() => {\n      try {\n        setLoaded(false);\n\n        const date = new Date();\n        const newD = new Date();\n        const newDate = new Date(date.setMonth(date.getMonth()-referenceDate));      \n        const dateFormated = (newD.getFullYear() + \"-\" + ((newD.getMonth() + 1)) + \"-\" + (newD.getDate() ));\n        const newDateFormated = (newDate.getFullYear() + \"-\" + ((newDate.getMonth() + 1)) + \"-\" + (newDate.getDate() ));\n        const result = await api.get(`/dashboard?fim=${formatDate(dateFormated)}&inicio=${formatDate(newDateFormated)}&login=${user?.login}`, {\n          headers: {\n            Authorization: user?.token,\n          }\n        });\n        setContas(result.data);\n        setLoaded(true);\n       \n      }catch (err) {\n        console.log(err);\n      }\n    };\n\n    getDashboardValues();\n  }, [ referenceDate, user?.login, user?.token, formatDate, dashboard ]);\n\n  const updateReference = (event:ChangeEvent<HTMLInputElement>) => {\n    const value = Number(event.target.value);\n    if (value > 0 && value <= 12) \n      setReferenceDate(value);\n  } \n\n  if ( loaded )return (\n    <TransactionsContainer>\n      {/* Componente para página principal */}      \n\n      <Balance contaBanco={contas?.contaBanco} contaCredito={contas?.contaCredito}/>\n\n      <MonthConatiner>\n        <p>Escolhe a quantidade de <strong>meses</strong> para o filtro: </p>\n        <input  type=\"number\" min={1} max={12} value={referenceDate} onChange={updateReference}/>\n      </MonthConatiner>\n\n      <Extract contaBanco={contas?.contaBanco} contaCredito={contas?.contaCredito}/>\n      {/* <FiArrowLeft onClick={() => {props.func('')}}/> */}\n\n    </TransactionsContainer>\n  );\n  else return <Loader style={{ border: '4px solid #f0f0f0' }} />\n  \n}\n\nexport default Transactions;"]},"metadata":{},"sourceType":"module"}